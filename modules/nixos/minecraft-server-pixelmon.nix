# Auto-generated using compose2nix v0.3.2-pre.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };

  # Enable container name DNS for non-default Podman networks.
  # https://github.com/NixOS/nixpkgs/issues/226365
  networking.firewall.interfaces."podman+".allowedUDPPorts = [ 53 ];

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."mc-mc" = {
    image = "itzg/minecraft-server:java8-multiarch";
    environment = {
      "CF_API_KEY" = "$2a$10$mXui0WAUP6JbODKCVbyK5OXcWBkvVc1SSilK5cDBaqygEpWFPc2ge";
      "CF_FILENAME_MATCHER" = "9.1.2";
      "CF_SLUG" = "the-pixelmon-modpack";
      "ENABLE_ROLLING_LOGS" = "true";
      "ENABLE_WHITELIST" = "true";
      "EULA" = "true";
      "MEMORY" = "6G";
      "MODPACK_PLATFORM" = "AUTO_CURSEFORGE";
      "USE_AIKAR_FLAGS" = "true";
    };
    volumes = [
      "mc_mc-data:/data:rw,Z"
    ];
    ports = [
      "25565:25565/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=mc"
      "--network=mc_default"
    ];
  };
  systemd.services."podman-mc-mc" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "podman-network-mc_default.service"
      "podman-volume-mc_mc-data.service"
    ];
    requires = [
      "podman-network-mc_default.service"
      "podman-volume-mc_mc-data.service"
    ];
    partOf = [
      "podman-compose-mc-root.target"
    ];
    wantedBy = [
      "podman-compose-mc-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-mc_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f mc_default";
    };
    script = ''
      podman network inspect mc_default || podman network create mc_default
    '';
    partOf = [ "podman-compose-mc-root.target" ];
    wantedBy = [ "podman-compose-mc-root.target" ];
  };

  # Volumes
  systemd.services."podman-volume-mc_mc-data" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      podman volume inspect mc_mc-data || podman volume create mc_mc-data
    '';
    partOf = [ "podman-compose-mc-root.target" ];
    wantedBy = [ "podman-compose-mc-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-mc-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
